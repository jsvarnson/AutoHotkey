;====================================================================================================
;	Excel	v1.05
;====================================================================================================
/*â˜»
-------------------------
|	Main Directory		|
-------------------------
1.	Key Mapping
2.	Equations
3.	ComObjects
4.	
5.	
-------------------------
|		  END			|
-------------------------
*/
;====================================================================================================
;	Settings
;====================================================================================================

#Singleinstance, Force					; Recommended for all scripts to prevent old instances
#NoEnv									; Recommended for all scripts to disable environment variables
#MaxHotkeysPerInterval 99000000			; Recommended for all scripts to prevent error messages
#HotkeyInterval 99000000				; Recommended for all scripts to prevent error messages
#KeyHistory 0							; Only useful for debugging purposes
ListLines Off							; Only useful for debugging purposes
Process, Priority, , A					; Recommended to set a higher priority to improve speed
SetBatchLines, -1						; Recommended to remove the default 10 ms sleep between lines
SetKeyDelay, -1, -1						; Recommended to remove the default 10 ms sleep between lines
SetMouseDelay, -1						; Recommended to remove the default delayed mouse move
SetDefaultMouseSpeed, 0					; Recommended to remove the default delayed mouse move
SetWinDelay, -1							; Recommended to set sendinput as the default send method
SetControlDelay, -1						; Recommended to set sendinput as the default send method
SendMode Input							; Recommended to set sendinput as the default send method

;====================================================================================================
;	Universal	
;====================================================================================================

~^+Esc::								; Exits all active scripts
	Exitapp
	return

~^Esc::									; Pauses all active scripts
	Suspend, on
	Pause, on
	return

~^!#+r::								; Unpauses and reloads all active scripts
	Suspend, off
	Pause, off
	SetTimer,UPDATEDSCRIPT,1000
	return	
	
~^s::									; Reloads scipt upon save
	SetTimer,UPDATEDSCRIPT,1000
	UPDATEDSCRIPT:
		FileGetAttrib,attribs,%A_ScriptFullPath%
		IfInString,attribs,A
		{
			FileSetAttrib,-A,%A_ScriptFullPath%
			Reload
		}
	return

;====================================================================================================
;	Main
;====================================================================================================

#IfWinActive, ahk_exe Excel.exe

;---------------------------------------------------------------------------
;	Key Mapping
;---------------------------------------------------------------------------

;--------------------------------------------------
;	Function Keys
;--------------------------------------------------

;F1		-> still not sure what I should remap to

;F2 enters a cell to edit
	
F3::
	send, {F4 3}
	return

;F4 locks a rows and columns

;---------------------------------------------------------------------------
;	Equations
;---------------------------------------------------------------------------

;--------------------------------------------------
;	Index Match
;--------------------------------------------------

:*:=inddm::
	send, =index(,match(,,),match(,,)
	send, {left}
	send, {right}
	send, {enter}
	sleep, 1
	send, {enter}
	sleep, 1
	send, {right}
	send, {)}
	sleep, 1
	send, {left 21}
	return

:*:=indm::
	send, =index(,match(,,)
	send, {left}
	send, {right}
	send, {enter}
	sleep, 1
	send, {enter}
	sleep, 1
	send, {right}
	send, {)}
	sleep, 1
	send, {left 11}
	return

;--------------------------------------------------
;	Vlookup
;--------------------------------------------------

:*:=vl::
	send, =vlookup(
	send, {left}
	return 
	
;--------------------------------------------------
;	AutoCorrect
;--------------------------------------------------
	
:*:fa::FALSE)
:*:run::RUN LOG


;--------------------------------------------------
;	Iferror
;--------------------------------------------------	

:*:ifer::
	send, iferror(
	send, {end}
	send, {down}
	send, {end}
	send, {down}
	send, {end}
	send, {down}
	send, {end}
	send, {down}
	send, {,}"-")
	return
	
;--------------------------------------------------
;	Home Row Filter
;--------------------------------------------------

^!#+1::
	send, ^{home}
	sleep, 5
	send, +{space}
	sleep, 5
	send, ^+{l}
	sleep, 5
	send, {left}
	return

;---------------------------------------------------------------------------
;	Comobjects
;---------------------------------------------------------------------------
/*
	Colors
--------------------------
56		-> Super Dark Gray
16		-> Dark Gray
48		-> Medium Gray
15		-> Light Gray		
*/
;====================================================================================================
;	ComObjects 
;====================================================================================================
/*
-------------------------
|	Main Directory		|
-------------------------
1.	ComObject	- autoformat sheet
2.	check if text, convert to number	- selected area
3.	check if number, convert to text	- selected area
4.	
5.	Function Library
-------------------------
|		  END			|
-------------------------

-----------------------------------------------------------------------
|||||||||||||||||||||||||||||| Variables ||||||||||||||||||||||||||||||
-----------------------------------------------------------------------
1.	active_header_rg			-> stores active header range
2.	active_tbl_rg				-> stores active table range
3.	active_col_rg				-> stores active column range
4.	active_row_rg				-> stores active row range
5.	sel_header_rg				-> stores selected header range
6.	sel_tbl_rg					-> stores selected table range
7.	sel_col_rg					-> stores selected column range
8.	sel_row_rg					-> stores selected row range
*/
;---------------------------------------------------------------------------
;	Autoformat Used Range of Active Sheet
;---------------------------------------------------------------------------

F8::
	send, ^{home}																								; moves cursor to cell A1 for convenience
	XL_Handle(XL,3) ;1=Application 2=Workbook 3=Worksheet														; get handle to Application	
	active_header_rg	:= XL_Used_RG(XL,2)																		; finds and stores active header range
	active_tbl_rg		:= XL_Used_RG(XL,1)																		; finds and stores active table range
	active_col_rg		= XL_First_Col_Alpha(XL)":"XL_Last_Col_Alpha(XL)										; finds and stores active column range	
	XL_Format_Wrap(XL,RG:= active_header_rg ,Wrap:=0)															; Unwraps all cells in active header range
	XL_Format_Wrap(XL,RG:= active_tbl_rg ,Wrap:=0)																; Unwraps all cells in active table range
	
	
	;XL_Col_To_Char(2)																	; Sets columns string
	;XL_String_To_Number("ab")															; Sets columns numeric
	;Xl.Range("J:J").NumberFormat := "#########"										; change the column format to 9 digits
	
	;XL_Format_Number(XL,RG:="B:B",Format:="#########")
	
	
	XL_Format_Font(XL,RG:="A1:BM4000",Font:="Roboto Mono",Size:=10)												; Sets whole sheet font and size	;Inconsolata
	XL_Border(XL,RG:=  active_header_rg ,Weight:=2,Line:=1)														; Outlines the header
	XL_Format_Cell_Shading(XL,RG:="A1:BM4000",Color:=48)														; shades whole sheet very dark gray
	XL_Format_Cell_Shading(XL,RG:= active_header_rg ,Color:=16)													; shades active header range medium gray
	XL_Format_Format(XL,RG:= active_header_rg ,Bold:=1,Italic:=0,Underline:=0) 									; sets active header range bold, italic, or underline	;1 = on
	XL_Format_Cell_Shading(XL,RG:= active_tbl_rg ,Color:=15)													; shades active table range light gray
	XL_Col_Width_Set(XL,RG:="A:BM=-1")																			; autofits active column range
	XL_Row_Height(XL,RG:="1:4000=-1")																			; autofits active row range
	return

;---------------------------------------------------------------------------
;	Saves File as CSV 
;---------------------------------------------------------------------------

F7::
	xlCSV = 6
	SetTimer, ChooseName, 10
	InputBox, CSVName, Save As CSV,,, 300, 250, center, center,,, .csv											; Show the InputBox to choose a name for the file
	if ErrorLevel <> 0  ; The user pressed Cancel.
    return
	
	CSVFILENAME := CSVName																						; saves name as variable

	FileSelectFile, FilePath																					; file explorer to select file and save as variable

	oExcel := ComObjCreate("Excel.Application") 																; Creates excel object
	oExcel.Workbooks.Open(FilePath)																				; Opens the selected existing file
	oExcel.Visible := False																						; set to false if you don't need excel to be seen
	oExcel.DisplayAlerts := False																				; this is Set to False to suppress prompts and alert messages 
	oExcel.ActiveWorkbook.SaveAs(A_Desktop . "\" . CSVFILENAME, xlCSV)											; saves file as above chosen name in CSV format
	oExcel.Quit()
	exitapp

ChooseName:
	IfWinNotActive, Save As CSV
		return
	Send, {HOME}																								; moves cursor to beginning of InputBox window		
	SetTimer, ChooseName, Off
	return

;====================================================================================================
;	END
;====================================================================================================	

	
	
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
;	FUNCTION LIBRARY
;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\	
/*
-------------------------
|	   Directory		|
-------------------------
1.	Connect to Excel
2.	First Row
3.	Used Row
4.	Last Row
5.	First Col Numeric
6.	First Col Alpha
7.	Used Col
8.	Last Col Numeric
9.	Last Col Alpha
10.	Used Range
11.	Shading
12.	Font Type & Size
13.	Char Formatting
14.	Col Width
15.	Row Height
16.	Selected Range
17.	First Selected Col 
18.	First Selected Row
19.	Number to String
20.	String to Number
21.	Horiz Alignment
22.	Vert Alignment
23.	Wrap Text
24.	Cell Borders
25.	Cell Number Format
26.	Select Cells
27.	Deselect Cells
28.	Select Sheet
-------------------------
|		  END			|
-------------------------
*/
;====================================================================================================
;	1.	Function for connecting to Excel
;====================================================================================================

XL_Handle(ByRef PXL,Sel){													;used for all other excel ComObjects in this script
ControlGet, hwnd, hwnd, , Excel71, ahk_class XLMAIN 						;identify the hwnd for Excel
IfEqual,Sel,1, Return, PXL:= ObjectFromWindow(hwnd,-16).application			;Handle to Excel Application
IfEqual,Sel,2, Return, PXL:= ObjectFromWindow(hwnd,-16).parent 				;Handlle to active Workbook
IfEqual,Sel,3, Return, PXL:= ObjectFromWindow(hwnd,-16).activesheet			;Handle to Active Worksheet
}
;***********adapted from ACC.ahk*******************
ObjectFromWindow(hWnd, idObject = -4){
(if Not h)?h:=DllCall("LoadLibrary","Str","oleacc","Ptr")
 If DllCall("oleacc\AccessibleObjectFromWindow","Ptr",hWnd,"UInt",idObject&=0xFFFFFFFF,"Ptr",-VarSetCapacity(IID,16)+NumPut(idObject==0xFFFFFFF0?0x46000000000000C0:0x719B3800AA000C81,NumPut(idObject==0xFFFFFFF0?0x0000000000020400:0x11CF3C3D618736E0,IID,"Int64"),"Int64"), "Ptr*", pacc)=0
 Return ComObjEnwrap(9,pacc,1)
}

;====================================================================================================
;	2.	First Row Function
;====================================================================================================

;~ XL_First_Row(XL)
XL_First_Row(PXL){
 Return, PXL.Application.ActiveSheet.UsedRange.Rows(1).Row
}

;~ XL_First_Row(XL)
;XL_First_Row(PXL){
; Return, PXL.Application.ActiveSheet.UsedRange.Rows(1).Row
;}

;====================================================================================================
;	3.	Used Row Function
;====================================================================================================

XL_Used_rows(PXL){
 Return,PXL.Application.ActiveSheet.UsedRange.Rows.Count
}

;~ Rows:=XL_Used_Rows(XL)
;XL_Used_rows(PXL){
;  To do						;old excel library
;}

;====================================================================================================
;	4.	Last Row Function
;====================================================================================================

;~ LR:=XL_Last_Row(XL)
XL_Last_Row(PXL){
 Return PXL.Application.ActiveSheet.UsedRange.Rows(PXL.Application.ActiveSheet.UsedRange.Rows.Count).Row
}

;====================================================================================================
;	5.	First Column Numeric Function
;====================================================================================================

;~ XL_First_Col_Nmb(XL)
XL_First_Col_Nmb(PXL){
 Return, PXL.Application.ActiveSheet.UsedRange.Columns(1).Column
}

;====================================================================================================
;	6.	First Column Alpha Function
;====================================================================================================

;~ XL_Last_Col_Alpha(XL)
XL_First_Col_Alpha(PXL){
 FirstCol:=PXL.Application.ActiveSheet.UsedRange.Columns(1).Column
 IfLessOrEqual,LastCol,26, Return, (Chr(64+FirstCol))
 Else IfGreater,LastCol,26, return, Chr((FirstCol-1)/26+64) . Chr(mod((FirstCol- 1),26)+65)
}

;====================================================================================================
;	7.	Used Column Function
;====================================================================================================

;~ LC:=XL_Used_Cols_Nmb(XL)
XL_Used_Cols_Nmb(PXL){
 Return, PXL.Application.ActiveSheet.UsedRange.Columns.Count
}

;====================================================================================================
;	8.	Last Column Numeric Function
;====================================================================================================

;~ LC:=XL_Last_Col_Nmb(XL)
XL_Last_Col_Nmb(PXL){
 Return, PXL.Application.ActiveSheet.UsedRange.Columns(PXL.Application.ActiveSheet.UsedRange.Columns.Count).Column
}

;====================================================================================================
;	9.	Last Column Alpha Function
;====================================================================================================

;~ XL_Last_Col_Alpha(XL)		;Needs Workbook
XL_Last_Col_Alpha(PXL){
 LastCol:=XL_Last_Col_Nmb(PXL)
 IfLessOrEqual,LastCol,26, Return, (Chr(64+LastCol))
 Else IfGreater,LastCol,26, return, Chr((LastCol-1)/26+64) . Chr(mod((LastCol- 1),26)+65)
}

;====================================================================================================
;	10.	Used Range Function
;====================================================================================================	

;~ RG:=XL_Used_RG(XL,Header:=1) ;Use header to include/skip first row
XL_Used_RG(PXL,Header=1){
 IfEqual,Header,0,Return, XL_First_Col_Alpha(PXL) . XL_First_Row(PXL) ":" XL_Last_Col_Alpha(PXL) . XL_Last_Row(PXL)
 IfEqual,Header,1,Return, XL_First_Col_Alpha(PXL) . XL_First_Row(PXL)+1 ":" XL_Last_Col_Alpha(PXL) . XL_Last_Row(PXL)
 IfEqual,Header,2,Return, XL_First_Col_Alpha(PXL) . XL_First_Row(PXL) ":" XL_Last_Col_Alpha(PXL) . XL_First_Row(PXL)		;identifies just the header range	;i made this
}	
	
;====================================================================================================
;	11.	Shading Function
;====================================================================================================
	
XL_Format_Cell_Shading(PXL,RG="",Color=0){
PXL.Application.ActiveSheet.Range(RG).Interior.ColorIndex :=Color
}

;====================================================================================================
;	12.	Font Size and Type Function
;====================================================================================================

XL_Format_Font(PXL,RG="",Font="Arial",Size="11"){		;default selections. Do not change here
PXL.Application.ActiveSheet.Range(RG).Font.Name:=Font
PXL.Application.ActiveSheet.Range(RG).Font.Size:=Size
}

;====================================================================================================
;	13.	Font Bold Italic Underline Function
;====================================================================================================

XL_Format_Format(PXL,RG="",Bold=0,Italic=0,Underline=0){	;default selections. Do not change here
PXL.Application.ActiveSheet.Range(RG).Font.Bold:= bold
PXL.Application.ActiveSheet.Range(RG).Font.Italic:=Italic
(Underline="0")?(PXL.Application.ActiveSheet.Range(RG).Font.Underline:=-4142):(PXL.Application.ActiveSheet.Range(RG).Font.Underline:=Underline+1)
}

;====================================================================================================
;	14.	Column Width Function
;====================================================================================================

;~ XL_Col_Width_Set(XL,RG:="A:CZ=-1")
XL_Col_Width_Set(PXL,RG=""){
 for k, v in StrSplit(rg,"|") ;Iterate over array
	(StrSplit(v,"=").2="-1")?(PXL.Application.ActiveSheet.Columns(StrSplit(v,"=").1).AutoFit):(PXL.Application.ActiveSheet.Columns(StrSplit(v,"=").1).ColumnWidth:=StrSplit(v,"=").2)
}

;====================================================================================================
;	15.	Row Height Function
;====================================================================================================

;~ XL_Row_Height(XL,RG:="1:4=-1|10:13=50|21=15") ;rows first then height -1 is auto
XL_Row_Height(PXL,RG=""){
 for k, v in StrSplit(rg,"|") ;Iterate over array
 (StrSplit(v,"=").2="-1")?(PXL.Application.ActiveSheet.rows(StrSplit(v,"=").1).AutoFit):(PXL.Application.ActiveSheet.rows(StrSplit(v,"=").1).RowHeight:=StrSplit(v,"=").2)
}

;====================================================================================================
;	16.	Get Selected Range Function
;====================================================================================================

;(set absolute to 1 if you want $)
;~ Range:=XL_Get_Selected_Range(XL,0)
XL_Get_Selected_Range(PXL,Absolute=0){
 if Absolute
 Address:=PXL.Selection.address ;;~  Selected range with $ in them
 Else
 Address:=PXL.Selection.address(0,0) ;;Selected range without $ in them
 return Address
}

;====================================================================================================
;	17.	Get First Selected Column Function
;====================================================================================================

;~ XL_Get_First_Selected_Col(XL)
XL_Get_First_Selected_Col(PXL){
 return XL_Col_To_Char(PXL.Selection.column)
}
 
;====================================================================================================
;	18.	Get First Selected Row Function
;====================================================================================================

XL_Get_First_Selected_Row(PXL){
 return PXL.Selection.row
}
	
;====================================================================================================
;	19.	Numeric Column to String Function
;====================================================================================================

;~ XL_Col_To_Char(26)
XL_Col_To_Char(index){ ;Converting Columns to Numeric for Excel
 IfLessOrEqual,index,26, Return, (Chr(64+index))
 Else IfGreater,index,26, return, Chr((index-1)/26+64) . Chr(mod((index - 1),26)+65)
}

;====================================================================================================
;	20.	String Column to Number Function
;====================================================================================================

;~ XL_String_To_Number("ab")
XL_String_To_Number(Column){
 StringUpper, Column, Column
 Index := 0
 Loop, Parse, Column  ;loop for each character
 {ascii := asc(A_LoopField)
     if (ascii >= 65 && ascii <= 90)
 index := index * 26 + ascii - 65 + 1    ;Base = 26 (26 letters)
 else { return
 } }
return, index
}
	
;====================================================================================================
;	21.	Horizontal Alignment Function
;====================================================================================================
	
;~ XL_Format_HAlign(XL,RG:="A1:A10",h:=2) ;1=Left 2=Center 3=Right
XL_Format_HAlign(PXL,RG="",h="1"){ ;defaults are Right bottom
 IfEqual,h,1,Return,PXL.Application.ActiveSheet.Range(RG).HorizontalAlignment:=-4131 ;Left
 IfEqual,h,2,Return,PXL.Application.ActiveSheet.Range(RG).HorizontalAlignment:=-4108 ;Center
 IfEqual,h,3,Return,PXL.Application.ActiveSheet.Range(RG).HorizontalAlignment:=-4152 ;Right
}

;====================================================================================================
;	22.	Vertical Alignment Function
;====================================================================================================

;~ XL_Format_VAlign(XL,RG:="A1:A10",v:=4) ;1=Top 2=Center 3=Distrib 4=Bottom
XL_Format_VAlign(PXL,RG="",v="1"){
 IfEqual,v,1,Return,PXL.Application.ActiveSheet.Range(RG).VerticalAlignment:=-4160 ;Top
 IfEqual,v,2,Return,PXL.Application.ActiveSheet.Range(RG).VerticalAlignment:=-4108 ;Center
 IfEqual,v,3,Return,PXL.Application.ActiveSheet.Range(RG).VerticalAlignment:=-4117 ;Distributed
 IfEqual,v,4,Return,PXL.Application.ActiveSheet.Range(RG).VerticalAlignment:=-4107 ;Bottom
}

;====================================================================================================
;	23.	Wrap Text Function
;====================================================================================================

;~ XL_Format_Wrap(XL,RG:="A1:B4",Wrap:=0) ;1=Wrap text, 0=no
XL_Format_Wrap(PXL,RG="",Wrap="1"){ ;defaults to Wrapping
 PXL.Application.ActiveSheet.Range(RG).WrapText:=Wrap
}

;====================================================================================================
;	24.	Cell Borders Function
;====================================================================================================

;***********Note- some weights and linestyles overwrite each other*******************
;~ XL_Border(XL,RG:="a20:b21",Weight:=2,Line:=2) ;Weight 1=Hairline 2=Thin 3=Med 4=Thick  ***  Line 0=None 1=Solid 2=Dash 4=DashDot 5=DashDotDot

XL_Border(PXL,RG="",Weight="3",Line="1"){
 IfEqual,Line,0,SetEnv,Line,-4142 ; Excel constant for no border
 Loop, 4{
 PXL.Application.ActiveSheet.Range(RG).Borders(A_Index+6).Weight := Weight
 PXL.Application.ActiveSheet.Range(RG).Borders(A_Index+6).LineStyle := Line
}}
 
;====================================================================================================
;	25.	Cell Number Format Function
;====================================================================================================

;~ XL_Format_Number(XL,RG:="A1:B4",Format:="#,##0") ;#,##0 ;0,000 ;0,00.0 ;0000 ;000.0 ;.0% ;$0 ;m/dd/yy ;m/dd ;dd/mm/yyyy
XL_Format_Number(PXL,RG="",format="#,##0"){
 PXL.Application.ActiveSheet.Range(RG).NumberFormat := Format
}

;====================================================================================================
;	26.	Select Cells Function
;====================================================================================================

;~ XL_Select_Range(XL,"A1:A4")
XL_Select_Range(PXL,Range,Sheet_Name=""){
 if (Sheet_Name="")
 PXL.Application.ActiveSheet.Range(Range).Select
 Else {
 XL_Select_Sheet(PXL,Sheet_Name)
 PXL.Sheets(Sheet_Name).Range(Range).Select
 }
}

;====================================================================================================
;	27.	Deselect Cells Function
;====================================================================================================

;~ XL_UnSelect(XL) ;Unselects highlighted cells
XL_UnSelect(PXL){
 PXL.Application.ActiveSheet.CutCopyMode := False
}

;====================================================================================================
;	28.	Select Sheet Function
;====================================================================================================

;XL_Select_Sheet(XL,"Sheet2")
XL_Select_Sheet(PXL,Sheet_Name){
 PXL.Sheets(Sheet_Name).Select
}

;====================================================================================================
;	29.	
;====================================================================================================


	


;====================================================================================================
;	END 
;====================================================================================================	
	
	
	

;====================================================================================================
;	Archive
;====================================================================================================
/*
;---------------------------------------------------------------------------
;	Convert Alpha to Numeric
;---------------------------------------------------------------------------
/*
F10::
	XL_Handle(XL,1) ;1=Application 2=Workbook 3=Worksheet
	;***********Examples ;#,##0   ;0,000   ;0,00.0  ;.0% ;$0 ;m/dd/yy ;m/dd ;dd/mm/yyyy
	/*
	XL_Format_Number(XL,RG:="A1:B2",Format:="#,##0")
	Sleep, 2000
	XL_Format_Number(XL,RG:="A1:B2",Format:="0,00.00")
	Sleep, 2000
	XL_Format_Number(XL,RG:="A1:B2",Format:=".0%")
	Sleep, 2000
	XL_Format_Number(XL,RG:="A1:B2",Format:="m/dd/yy")
	Sleep, 2000
	XL_Format_Number(XL,RG:="A1:B2",Format:="m/dd")
	
	XL_Format_Number(XL,RG:="B:B",Format := "000000000")
	XL_Format_Number(XL,RG:="E:E",Format := "000000000")
	XL_Format_Number(XL,RG:="G:G",Format := "000000")
	XL_Format_Number(XL,RG:="H:H",Format := "00000")
	XL_Format_Number(XL,RG:="K:K",Format := "00000000")
	XL_Format_Number(XL,RG:="L:L",Format := "0000")
	XL_Format_Number(XL,RG:="AD:AD",Format := "00000000")
	XL_Format_Number(XL,RG:="AE:AE",Format := "0000000000")
	XL_Format_Number(XL,RG:="AF:AF",Format := "0000000")
	XL_Format_Number(XL,RG:="AS:AS",Format := "000000")
	
	
	
	;***********************Cell Number format********************************.
	XL_Format_Number(PXL,RG="",format="#,##0"){
	PXL.Application.ActiveSheet.Range(RG).NumberFormat := Format
	}
	return
*/




/*
F10::
	;***********************alpha to Number********************************.
	;~XL_String_To_Number("ab")		
	XL_String_To_Number(Column){
	 StringUpper, Column, Column
	 Index := 0
	 Loop, Parse, Column  ;loop for each character
	 {ascii := asc(A_LoopField)
		 if (ascii >= 65 && ascii <= 90)
	 index := index * 26 + ascii - 65 + 1    ;Base = 26 (26 letters)
	 else { return
	 } }
	return, index
	}
	return





Formats ranges to specificed format		-> does not convert text to numbers though. not robust

F10::
	oExcel := ComObjActive("Excel.Application")
	;msgbox % oExcel.range("A1").value
	;if (oExcel.range("A1").value = "yes")
	;{
   oExcel.range("B:B").NumberFormat := "000000000"
   oExcel.range("E:E").NumberFormat := "000000000"
   oExcel.range("G:G").NumberFormat := "000000"
   oExcel.range("H:H").NumberFormat := "00000"
   oExcel.range("K:K").NumberFormat := "00000000"
   oExcel.range("L:L").NumberFormat := "0000"
   oExcel.range("AD:AD").NumberFormat := "00000000"
   oExcel.range("AE:AE").NumberFormat := "0000000000"
   oExcel.range("AF:AF").NumberFormat := "0000000"
   oExcel.range("AS:AS").NumberFormat := "000000"
   ;oExcel.range("").NumberFormat := "yyyymmdd"	;saved as example of date formatting
;}
	return
*/
;--------------------------------------------------
;	Format - Set number formats
;--------------------------------------------------
/*		;still working out the details on converting text to numbers
F8::
	XL_Handle(XL,1) ;1=Application 2=Workbook 3=Worksheet
	 
	;***********Examples ;#,##0   ;0,000   ;0,00.0  ;.0% ;$0 ;m/dd/yy ;m/dd ;dd/mm/yyyy
	XL_Format_Number(XL,RG:="B:B",Format:= "000000000")
	Sleep, 2000	
	XL_Format_Number(XL,RG:="A1:B2",Format:="0,00.00")
	Sleep, 2000
	XL_Format_Number(XL,RG:="A1:B2",Format:=".0%")
	Sleep, 2000
	XL_Format_Number(XL,RG:="A1:B2",Format:="m/dd/yy")
	Sleep, 2000
	XL_Format_Number(XL,RG:="A1:B2",Format:="m/dd")
	 
	;***********************Cell Number format********************************.
	XL_Format_Number(PXL,RG="",format="#,##0"){
	PXL.Application.ActiveSheet.Range(RG).NumberFormat := Format
	}
	
	
;---------------------------------------------------------------------------
;	Autoformat Column Width
;---------------------------------------------------------------------------	

;currently set to autoformat width of columns A to O to autofit contents

;--------------------------------------------------
;	Column Activation and Range
;--------------------------------------------------	
	
F8::	
	XL_Handle(XL,1) ;1=Application 2=Workbook 3=Worksheet	;get handle to Application
	 
	;XL_Col_Width_Set(XL,RG:="A:B=-1|D:F=-1|H=15|K=3") ;-1 is auto	;use | to separate multiple arrays
	XL_Col_Width_Set(XL,RG:="A:O=-1")
	;XL_Col_Insert(XL,RG:="B:C",WD:=8)			;insert column(s) and set width
	;XL_Col_Delete(XL,RG:="A|D:F|Z|BB:BC") 		;Delete columns
	return

;--------------------------------------------------
;	Column Width Function
;--------------------------------------------------	
	
	;***********column width*******************
	XL_Col_Width_Set(PXL,RG=""){
	 for k, v in StrSplit(rg,"|") ;Iterate over array
		(StrSplit(v,"=").2="-1")?(PXL.Application.ActiveSheet.Columns(StrSplit(v,"=").1).AutoFit):(PXL.Application.ActiveSheet.Columns(StrSplit(v,"=").1).ColumnWidth:=StrSplit(v,"=").2)
	}


;---------------------------------------------------------------------------
;	Autoformat Selected Range of Active Sheet
;---------------------------------------------------------------------------




;^+k::
;	sel_tbl_rg	:= XL_Get_Selected_Range(XL,0)
;	XL_Format_Cell_Shading(XL,RG:= sel_tbl_rg ,Color:=52)	
;	return





/*

	send, ^{home}																								;moves cursor to cell A1 for convenience
	XL_Handle(XL,3) ;1=Application 2=Workbook 3=Worksheet														;get handle to Application	
	active_header_rg	:= XL_First_Col_Alpha(XL)XL_First_Row(XL)":"XL_Last_Col_Alpha(XL)XL_First_Row(XL) 		;finds and stores active header range
	active_tbl_rg		:= XL_Used_RG(XL,1)																		;finds and stores active table range
	active_col_rg		= XL_First_Col_Alpha(XL)":"XL_Last_Col_Alpha(XL)										;finds and stores active column range
	;active_row_rg		= %XL_First_Row(XL)":"XL_Last_Row(XL)%													;finds and stores active row range


sel_header_rg	:= XL_Get_First_Selected_Col(XL)XL_Get_First_Selected_Row(XL)":"
sel_tbl_rg		:= XL_Get_Selected_Range(XL,1)
sel_col_rg		:= 


;(set absolute to 1 if you want $)
;~ Range:=XL_Get_Selected_Range(XL,0)
XL_Get_Selected_Range(PXL,Absolute=0){
 if Absolute
 Address:=PXL.Selection.address ;;~  Selected range with $ in them
 Else
 Address:=PXL.Selection.address(0,0) ;;Selected range without $ in them
 return Address
}

;====================================================================================================
;	17.	Get First Selected Column Function
;====================================================================================================

;~ XL_Get_First_Selected_Col(XL)
XL_Get_First_Selected_Col(PXL){
 return XL_Col_To_Char(PXL.Selection.column)
}
 
;====================================================================================================
;	18.	Get First Selected Row Function
;====================================================================================================

XL_Get_First_Selected_Row(PXL){
 return PXL.Selection.row
}




	XL_Get_Selected_Range(XL,0)





	XL_Format_Cell_Shading(XL,RG:= active_header_rg ,Color:=16)													;shades active header range medium gray
	XL_Format_Format(XL,RG:= active_header_rg ,Bold:=1,Italic:=0,Underline:=0) 									;sets active header range bold, italic, or underline	;1 = on
	XL_Format_Cell_Shading(XL,RG:= active_tbl_rg ,Color:=15)													;shades active table range light gray
	return
	
	
;====================================================================================================
;	original autoshade function
;====================================================================================================	
	

/*		; saved original version		storage ratio new to old => 13,735:701 ==> 19.6:1 file size
F8::
	send, ^{home}																								;moves cursor to cell A1 for convenience
	XL_Handle(XL,3) ;1=Application 2=Workbook 3=Worksheet														;get handle to Application	
	active_header_rg	:= XL_Used_RG(XL,2)																		;finds and stores active header range
	active_tbl_rg		:= XL_Used_RG(XL,1)																		;finds and stores active table range
	active_col_rg		= XL_First_Col_Alpha(XL)":"XL_Last_Col_Alpha(XL)										;finds and stores active column range	
	XL_Format_Wrap(XL,RG:= active_header_rg ,Wrap:=0)															;Unwraps all cells in active header range
	XL_Format_Wrap(XL,RG:= active_tbl_rg ,Wrap:=0)																;Unwraps all cells in active table range
	
	
	;XL_Col_To_Char(2)																	;Sets columns string
	;XL_String_To_Number("ab")															;Sets columns numeric
	;Xl.Range("J:J").NumberFormat := "#########"										;change the column format to 9 digits
	
	;XL_Format_Number(XL,RG:="B:B",Format:="#########")
	
	
	XL_Format_Font(XL,RG:="A1:AZ100000",Font:="Roboto Mono",Size:=10)											;Sets whole sheet font and size	;Inconsolata
	XL_Border(XL,RG:=  active_header_rg ,Weight:=2,Line:=1)														;Outlines the header
	XL_Format_Cell_Shading(XL,RG:="A1:AZ100000",Color:=56)														;shades whole sheet very dark gray
	XL_Format_Cell_Shading(XL,RG:= active_header_rg ,Color:=16)													;shades active header range medium gray
	XL_Format_Format(XL,RG:= active_header_rg ,Bold:=1,Italic:=0,Underline:=0) 									;sets active header range bold, italic, or underline	;1 = on
	XL_Format_Cell_Shading(XL,RG:= active_tbl_rg ,Color:=15)													;shades active table range light gray
	XL_Col_Width_Set(XL,RG:="A:AsZ=-1")																			;autofits active column range
	XL_Row_Height(XL,RG:="1:10000=-1")																			;autofits active row range
	return
*/
