;====================================================================================================
;	DashMail	v3.01
;====================================================================================================
/*â˜»
	Version History
1.01	- new file, send @ interval functionality
2.01	- added send once, now functionality. drastically improved GUI interface and script organization
3.01	- added	send later @ time functionality. Added second, unique, GUI. minor improvements to GUI interface

-------------------------
|	Main Directory		|
-------------------------
1.	Settings
2.	Universal
3.	GUI
4.	Subroutines
5.	Archive
-------------------------
|		  END			|
-------------------------
*/
;====================================================================================================
;	Settings
;====================================================================================================

#Singleinstance, Force					; Recommended for all scripts to prevent old instances
#NoEnv									; Recommended for all scripts to disable environment variables
#MaxHotkeysPerInterval 99000000			; Recommended for all scripts to prevent error messages
#HotkeyInterval 99000000				; Recommended for all scripts to prevent error messages
#KeyHistory 0							; Only useful for debugging purposes
ListLines Off							; Only useful for debugging purposes
Process, Priority, , A					; Recommended to set a higher priority to improve speed
SetBatchLines, -1						; Recommended to remove the default 10 ms sleep between lines
SetKeyDelay, -1, -1						; Recommended to remove the default 10 ms sleep between lines
SetMouseDelay, -1						; Recommended to remove the default delayed mouse move
SetDefaultMouseSpeed, 0					; Recommended to remove the default delayed mouse move
SetWinDelay, -1							; Recommended to set sendinput as the default send method
SetControlDelay, -1						; Recommended to set sendinput as the default send method
SendMode Input							; Recommended to set sendinput as the default send method

gui_autoexecute:
    ; Tomorrow Night Color Definitions:
    cBackground := "c" . "1d1f21"
    cCurrentLine := "c" . "282a2e"
    cSelection := "c" . "373b41"
    cForeground := "c" . "c5c8c6"
    cComment := "c" . "969896"
    cRed := "c" . "cc6666"
    cOrange := "c" . "de935f"
    cYellow := "c" . "f0c674"
    cGreen := "c" . "b5bd68"
    cAqua := "c" . "8abeb7"
    cBlue := "c" . "81a2be"
    cPurple := "c" . "b294bb"

    gui_control_options := "xm w220 " . cForeground . " -E0x200"
    ; -E0x200 removes border around Edit controls

    ; Initialize variable to keep track of the state of the GUI
    gui_state = closed

    ; Initialize search_urls as a variable set to zero
    search_urls := 0
    return

;====================================================================================================
;	Universal	
;====================================================================================================

~^+Esc::								; Exits all active scripts
	Exitapp
	return

~^Esc::									; Pauses all active scripts
	Suspend, on
	Pause, on
	return

~^!#+r::								; Unpauses and reloads all active scripts
	Suspend, off
	Pause, off
	SetTimer,UPDATEDSCRIPT,1000
	return	
	
~^s::									; Reloads scipt upon save
	SetTimer,UPDATEDSCRIPT,1000
	UPDATEDSCRIPT:
		FileGetAttrib,attribs,%A_ScriptFullPath%
		IfInString,attribs,A
		{
			FileSetAttrib,-A,%A_ScriptFullPath%
			Reload
		}
	return

;====================================================================================================
;	GUI
;====================================================================================================

;---------------------------------------------------------------------------
;	Variables
;---------------------------------------------------------------------------
/*
time				- interval time, in minutes
time2				- trigger time, in military time HHMM, won't let you include a ":"
Send				- checking OK on the interval GUI
Send2				- checking OK on the trigger time GUI
*/
;---------------------------------------------------------------------------
; GUI Functions and Subroutines
;---------------------------------------------------------------------------
 
;--------------------------------------------------
;	GUI Escape
;--------------------------------------------------

GuiEscape:																										; Automatically triggered on Escape key:
    gui_destroy()
    return

;--------------------------------------------------
;	GUI Destroy + Toggle
;--------------------------------------------------

#WinActivateForce																								; Destroy the GUI after use.
gui_destroy() {
    global gui_state
    global gui_search_title

    gui_state = closed
    ; Forget search title variable so the next search does not re-use it
    ; in case the next search does not set its own:
    gui_search_title =

    ; Hide GUI
    Gui, Destroy

    ; Bring focus back to another window found on the desktop
    WinActivate
}
	return

;--------------------------------------------------
;	GUI Close
;--------------------------------------------------

GUIClose:
	Pause, on
	Reload
	return
	
;--------------------------------------------------
;	Button - OK
;--------------------------------------------------	
	
ButtonOK:																										; send @ interval OK Button
	GUI, Submit
		if send
		gosub, ChooseNameFileRec																				; chooses file name, file path, and email recipients
		gosub, 	Dash_mail_send																					; activates the action subroutine
	SetTimer, period, % time * 1000 * 60	; * 60 * 24	* 7														; creates an interval timer in minutes	; in hours	; in days	; in weeks
	return																										; remember to update GUI label from (min) if you change periodicity
	
ButtonOK2:																										; send @ time OK Button
	GUI, Submit
		if send2
		gosub, ChooseNameFileRec																				; chooses file name, file path, and email recipients
		gosub, OuttaTime																						; calculates time until desired time, then executes subroutine
	return																										
	
;--------------------------------------------------
;	Button - Cancel
;--------------------------------------------------	

ButtonCancel:																									; pauses and reloads all existing threads for this script
	GUI, Hide
	Pause, on
	Reload																										; will reset sequences for both the interval and the desired time routines
	return
	
;---------------------------------------------------------------------------
;	Activators
;---------------------------------------------------------------------------	

;--------------------------------------------------
;	Send @ Interval 
;--------------------------------------------------

^!#+j::
	gui_spawn:
    if gui_state != closed
    {
        ; If the GUI is already open, close it.
        gui_destroy()
        return
    }
    gui_state = main
	Gui, Margin, 16, 16
	Gui, Color, 1d1f21, 282a2e
	Gui, +AlwaysOnTop -SysMenu +ToolWindow -caption +Border
	Gui, Font, s48 cf0c674, Rage Italic																			; choses font size and color
	GUI, Add, Text, x+10 y+10, DashMail																			
	Gui, Font, s22 cf0c674, Rage Italic																			; choses font size and color
	GUI, Add, Text, xm+14 y+1 , Send now...send later!
	Gui, Font, s11 cf0c674, Segoe UI																			; launches GUI
	GUI, Add, Text, xm+7, Enter time interval (min)																; determines the interval 	-> user input
	GUI, Add, Edit, x+45 +number w60 vtime, 15																	; creates time variable
	GUI, Add, Checkbox, checked xm+7 vsend, Send with OK														; Adds checkbox to the GUI 	-> must CLICK OK Button to activate interval timer																					
	GUI, Add, Button, default gButtonOK x+10 w60, OK															; Button OK control 		
	GUI, Add, Button, x+20 w60, Cancel																			; Button Cancel control
	GUI, Show, w310 h250																						; displays GUI
	return
	
;--------------------------------------------------
;	Send Once Now
;--------------------------------------------------	
	
^!#+k::
	gosub, ChooseNameFileRec																					; chooses file name, file path, and email recipients
	gosub, Dash_mail_send																						; activates the action subroutine
	gosub, SendMsg																								; activates the msgbox subroutine
	return	
	
;--------------------------------------------------
;	Send Later @ time
;--------------------------------------------------		
	
^!#+l::	
	gui_spawn2:
    if gui_state != closed
    {
        ; If the GUI is already open, close it.
        gui_destroy()
        return
    }
    gui_state = main
	Gui, Margin, 16, 16
	Gui, Color, 1d1f21, 282a2e
	Gui, +AlwaysOnTop -SysMenu +ToolWindow -caption +Border
	Gui, Font, s48 cf0c674, Rage Italic																			; choses font size and color
	GUI, Add, Text, x+10 y+10, DashMail																			; header text
	Gui, Font, s22 cf0c674, Rage Italic																			; choses font size and color
	GUI, Add, Text, xm+7 y+1 , Request now...send later!														; subtitle text
	Gui, Font, s11 cf0c674, Segoe UI																			; choses font size and color
	GUI, Add, Text, xm, Enter desired send time (HHMM)															; determines the trigger time 	-> user input
	GUI, Add, Edit, x+7 +number w55 vtime2, 0800																; creates time variable
	GUI, Add, Checkbox, checked xm vsend2, Send with OK															; Adds checkbox to the GUI 																					
	GUI, Add, Button, default gButtonOK2 x+36 w55, OK															; Button OK control 		
	GUI, Add, Button, x+20 w55, Cancel																			; Button Cancel control
	GUI, Show, w310 h250																						; displays GUI
	return
	
;====================================================================================================
;	Subroutines
;====================================================================================================

;---------------------------------------------------------------------------
;	Variables
;---------------------------------------------------------------------------
/*
CSVName				- Desired name of file to be saved and used as email subject - DO NOT include date/time or .csv
CSVNameTime			- Desired name of file to be saved + date/time stamped
FilePath			- Source file to be converted to CSV
FileDest			- Destination of converted CSV file
CSVFILENAME			- FileDest & CSVNameTime - new file full path
EmailTo				- Desired email recipients in the To line
EmailCC				- Desired email recipients in the CC line
TodayDateSubject	- Date formatted for subject line
TodayDateBody		- Date formatted for email body
TodayDateFile		- Date formatted for file saving 
*/
;---------------------------------------------------------------------------
;	Main Routines
;---------------------------------------------------------------------------

;--------------------------------------------------
;	Interval Trigger
;--------------------------------------------------
	
Period:																											; create new gosubs for each different file you want to send out
	Gosub, Dash_mail_send																						; function triggered by the interval above, triggering action subroutine
	return
	
;--------------------------------------------------
;	Sent Message
;--------------------------------------------------

SendMsg:
	msgbox, 0, File Sent, File has been sent successfully. , 1													; sends message upon subroutine completion
	return
	
;--------------------------------------------------
;	Check Time Trigger
;--------------------------------------------------	

OuttaTime:																										; calculates time until desired time, then executes secondary subroutine
	;time2 := regexreplace(time2, "):", "")																		; used to replace the ":" in the time input	; removed ":" from input GUI
	target_time = %time2%																						; 0145 ; 01:45 am	; use GUI to determine time
	; Get target time in a format we can:
	;  - compare (with "<"), and
	;  - use to calculate "time delta" (with EnvSub.)
	target = %A_YYYY%%A_MM%%A_DD%%target_time%00
	; < comparison should be safe as long as both are in the *exact* same format.
	if (target < A_Now)
	{   ; time(today) has passed already, so use time(tomorrow)
		EnvAdd, target, 1, d
	}
	; Calculate how many seconds until the target time is reached.
	EnvSub, target, %A_Now%, Seconds
	; Sleep until the target is reached.
	Sleep, % target * 1000 ; (milliseconds)
/*
	FormatTime, now, %A_Now%
	MsgBox, The time is now %now%	
*/	
	SetTimer, TargetTimeReached, % target * -1000 																; negative means run *once*
	msgbox, Your email will be sent at %time2%																	; confirmation message with time the email will be sent
	return
	
;--------------------------------------------------
;	Time Reached Trigger
;--------------------------------------------------	
	
TargetTimeReached:																								; once time is reached, main routine will execute
	gosub, Dash_mail_send
	return

;--------------------------------------------------
;	Moves Cursor at InputBox
;--------------------------------------------------	
	
ChooseFileName:																									; moves cursor to beginning of InputBox window		
	IfWinNotActive, Save As CSV
		return
	Send, {HOME}																								
	SetTimer, ChooseFileName, Off
	return	

;--------------------------------------------------
;	Select Name, File, and Recipients
;--------------------------------------------------

ChooseNameFileRec:
	SetTimer, ChooseFileName, 10
	InputBox, CSVName, Save As CSV,,, 300, 100, center, center,,, 	;.csv										; Show the InputBox to choose a name for the file	- DO NOT INCLUDE a time on this name
	FileSelectFile, FilePath																					; Select file to be saved as CSV
	FileSelectFolder, FileDest, ;"C:\Users\FM36\Desktop\DashMail\DashMail Archive\"								; Select where output file will be saved
	InputBox, EmailTo, Email To,,, 300, 100, center, center,,, joseph.arnson@MillerCoors.com					; Show the InputBox to choose recipients for email
	InputBox, EmailCC, Email CC To,,, 300, 100, center, center,,, joseph.arnson@MillerCoors.com					; Show the InputBox to choose CC recipients for email
	if 	CSVName = .csv																							; checks if any name was selected for new file
	{
	msgbox, No name selected
	Pause, on
	Reload
	}
	else if	CSVName = 																							; checks if any name was selected for new file
	{
	msgbox, No name selected
	Pause, on
	Reload
	}
	else if FilePath = 																							; checks if a file was selected to be converted
	{
	msgbox, No file selected
	Pause, on
	Reload
	}
	else if FileDest = 																							; checks if a destination was selected for the file
	{
	msgbox, No file destination selected
	Pause, on
	Reload	
	}
	return
	
;--------------------------------------------------
;	Sends email of CSV
;--------------------------------------------------

Dash_mail_send:
	TodayDateSubject 	:= A_YYYY . "-" . A_MM . "-" . A_DD . " at " . A_Hour . ":" . A_Min						; stores subject line date formatting
	TodayDateBody 		:= A_DDDD . ", " . A_MMMM . " " . A_DD . ", " . A_YYYY . " at " . A_Hour . ":" . A_Min	; stores email body date formatting
	TodayDateFile	 	:= A_YYYY . "-" . A_MM . "-" . A_DD . "_" . A_Hour . "-" . A_Min						; stores subject line date formatting	
	xlCSV = 6
	CSVNameTime = %CSVName%_%TodayDateFile%.csv																	; takes original name and adds a time stamp +.csv every time the subroutine runs
	CSVFILENAME = %FileDest%\%CSVNameTime%																		; name file to be saved
	oExcel := ComObjCreate("Excel.Application") 																; Creates excel object
	oExcel.Workbooks.Open(FilePath)																				; Opens the selected existing file
	oExcel.Visible := False																						; set to false if you don't need excel to be seen
	oExcel.DisplayAlerts := False																				; this is Set to False to suppress prompts and alert messages 
	oExcel.ActiveWorkbook.SaveAs(CSVFILENAME, xlCSV)															; saves file as CSV with chosen name	;don't include file type extension
	oExcel.Quit()																								; closes the excel object
	;exitapp	
	
	olMailItem := 0	
	o:= ComObjActive("Outlook.Application").Session()															; connect to outlook ComObject
	MailItem := ComObjActive("Outlook.Application").CreateItem(olMailItem)										; create new email
	MailItem.BodyFormat := 2 																					; olFormatHTML	
	MailItem.TO := EmailTo																						; Add recipients 	-> use ; between email names inside the outer quotes
	MailItem.CC := EmailCC																						; Add recipients to the CC line
	;~ MailItem.Replyto :="joejunkemail@yahoo.com"																; create a reply email
	
	MailItem.Subject 	:= CSVName " " TodayDateSubject															; Subject line of email
;																												; create body of email
;																												; <H2 style='BACKGROUND-COLOR: red'><br></H2>       ; Added as first line under MailItem.HTMLBody :=
	MailItem.HTMLBody := "																							
	<HTML>Please find your report updated as of "(TodayDateBody)" <br><br>
	<span style='color:black'>As always, please let me know if you have any questions or concerns.
	<br><br>Cheers,<br><br><a href='mailto:joseph.arnson@MillerCoors.com'>Joseph Arnson</a> 
	<br>Import Supply Chain Analyst
	<br>MillerCoors
	<br>Milwaukee, WI
	<br>414-931-2347
	</HTML>"
	MailItem.Attachments.Add(CSVFILENAME)	;should be same as name of file to be saved
	;~ MailItem.Display 																						; Make email visible
	;~ mailItem.Close(0) 																						; Creates draft version in default folder
	MailItem.Send() 																							; Sends the email
	Return

;====================================================================================================
;	END
;====================================================================================================	
	

;====================================================================================================
;	Archive
;====================================================================================================
